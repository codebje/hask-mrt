-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell parser for MRT dump files
--   
--   Please see README.md
@package mrt
@version 0.1.0.0


-- | MRT is a library for parsing Multi-Threaded Routing Toolkit (MRT)
--   export files, of the kind you might find on the RouteViews archive.
module Data.Network.BGP

-- | 2-byte AS number formats in BGP are unsupported
type ASNumber = Word32

-- | ORIGIN is a well-known mandatory attribute that defines the origin of
--   the path information.
--   
--   See: RFC 4271, Section 5.1.1
data Origin
IGP :: Origin
EGP :: Origin
INCOMPLETE :: Origin

-- | AS_PATH is a well-known mandatory attribute that is composed of a
--   sequence of AS path segments.
data ASPath

-- | A path segment is either an AS Set or an AS Sequence.
--   
--   See RFC 4271, Section 5.1.2
data ASPathSegment
ASSet :: [ASNumber] -> ASPathSegment
ASSequence :: [ASNumber] -> ASPathSegment

-- | A BGP attribute consist of flags, then one of t
data BGPAttributeValue
Origin :: Origin -> BGPAttributeValue
ASPath :: ASPath -> BGPAttributeValue
NextHop :: ByteString -> BGPAttributeValue
LocalPref :: Word32 -> BGPAttributeValue
AtomicAggregate :: BGPAttributeValue
UnknownAttribute :: Word8 -> ByteString -> BGPAttributeValue
data BGPAttributeFlags
data BGPAttribute
BGPAttribute :: BGPAttributeFlags -> BGPAttributeValue -> BGPAttribute
instance GHC.Show.Show Data.Network.BGP.BGPAttribute
instance GHC.Read.Read Data.Network.BGP.BGPAttribute
instance GHC.Show.Show Data.Network.BGP.BGPAttributeFlags
instance GHC.Read.Read Data.Network.BGP.BGPAttributeFlags
instance GHC.Show.Show Data.Network.BGP.BGPAttributeValue
instance GHC.Read.Read Data.Network.BGP.BGPAttributeValue
instance GHC.Show.Show Data.Network.BGP.ASPath
instance GHC.Read.Read Data.Network.BGP.ASPath
instance GHC.Show.Show Data.Network.BGP.ASPathSegment
instance GHC.Read.Read Data.Network.BGP.ASPathSegment
instance GHC.Enum.Enum Data.Network.BGP.Origin
instance GHC.Classes.Eq Data.Network.BGP.Origin
instance GHC.Show.Show Data.Network.BGP.Origin
instance GHC.Read.Read Data.Network.BGP.Origin
instance Data.Binary.Class.Binary Data.Network.BGP.Origin
instance Data.Binary.Class.Binary Data.Network.BGP.ASPath
instance Data.Binary.Class.Binary Data.Network.BGP.ASPathSegment
instance Data.Binary.Class.Binary Data.Network.BGP.BGPAttributeFlags
instance Data.Binary.Class.Binary Data.Network.BGP.BGPAttribute


-- | MRT is a library for parsing Multi-Threaded Routing Toolkit (MRT)
--   export files, of the kind you might find on the RouteViews archive.
module Data.Network.MRT

-- | The <a>Timestamp</a> type alias represents a BGP timestamp attribute,
--   recorded as seconds since the Unix epoch.
type Timestamp = Word32

-- | 2-byte AS number formats in BGP are unsupported
type ASNumber = Word32

-- | A path segment is either an AS Set or an AS Sequence.
--   
--   See RFC 4271, Section 5.1.2
data ASPathSegment

-- | A BGP attribute consist of flags, then one of t
data BGPAttributeValue
Origin :: Origin -> BGPAttributeValue
ASPath :: ASPath -> BGPAttributeValue
NextHop :: ByteString -> BGPAttributeValue
LocalPref :: Word32 -> BGPAttributeValue
AtomicAggregate :: BGPAttributeValue
UnknownAttribute :: Word8 -> ByteString -> BGPAttributeValue
data BGPAttributeFlags
data BGPAttribute
BGPAttribute :: BGPAttributeFlags -> BGPAttributeValue -> BGPAttribute
data RIBEntry
getPeerIndex :: RIBEntry -> Word16
getOriginationTime :: RIBEntry -> Timestamp
getBGPAttributes :: RIBEntry -> [BGPAttribute]
data MRTRecord
TableDumpV2 :: Word32 -> IPRange -> [RIBEntry] -> MRTRecord
[getSequenceNo] :: MRTRecord -> Word32
[getPrefix] :: MRTRecord -> IPRange
[getRIBEntries] :: MRTRecord -> [RIBEntry]
Other :: Word16 -> Word16 -> Word32 -> MRTRecord
data MRTMessage
getMessageTimestamp :: MRTMessage -> Timestamp
getRecord :: MRTMessage -> MRTRecord
readMessages :: ByteString -> [MRTMessage]

-- | A unified data for <a>AddrRange</a> <a>IPv4</a> and <a>AddrRange</a>
--   <a>IPv6</a>. To create this, use <a>read</a> <tt>"192.0.2.0/24"</tt>
--   :: <a>IPRange</a>. Also, <tt>"192.0.2.0/24"</tt> can be used as
--   literal with OverloadedStrings.
--   
--   <pre>
--   &gt;&gt;&gt; (read "192.0.2.1/24" :: IPRange) == IPv4Range (read "192.0.2.0/24" :: AddrRange IPv4)
--   True
--   
--   &gt;&gt;&gt; (read "2001:db8:00:00:00:00:00:01/48" :: IPRange) == IPv6Range (read "2001:db8:00:00:00:00:00:01/48" :: AddrRange IPv6)
--   True
--   </pre>
data IPRange :: *
instance GHC.Show.Show Data.Network.MRT.MRTMessage
instance GHC.Show.Show Data.Network.MRT.MRTRecord
instance GHC.Show.Show Data.Network.MRT.RIBEntry
